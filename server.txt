using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using Serilog;

namespace ServerApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Setup Serilog
            Log.Logger = new LoggerConfiguration()
                .WriteTo.File("serverlog.txt", rollingInterval: RollingInterval.Day)
                .CreateLogger();

            Log.Information("Server started.");

            try
            {
                // Create server socket
                Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                IPEndPoint endPoint = new IPEndPoint(IPAddress.Any, 1234);
                serverSocket.Bind(endPoint);
                serverSocket.Listen(10);

                Console.WriteLine("✅ Server is running. Waiting for clients...");
                Log.Information("Server is listening on port 1234.");

                while (true)
                {
                    Socket clientSocket = serverSocket.Accept();
                    Console.WriteLine("✅ Client connected.");
                    Log.Information("Client connected: {0}", clientSocket.RemoteEndPoint);

                    try
                    {
                        byte[] buffer = new byte[1024];
                        int receivedBytes = clientSocket.Receive(buffer);
                        string receivedMsg = Encoding.ASCII.GetString(buffer, 0, receivedBytes);

                        Console.WriteLine("Client: " + receivedMsg);
                        Log.Information("Received from client: {Message}", receivedMsg);

                        // Send a response back
                        string serverResponse = "Hello from server!";
                        byte[] responseBytes = Encoding.ASCII.GetBytes(serverResponse);
                        clientSocket.Send(responseBytes);
                        Log.Information("Sent to client: {Message}", serverResponse);
                    }
                    catch (Exception ex)
                    {
                        Log.Error("Error handling client: {Error}", ex.Message);
                    }
                    finally
                    {
                        clientSocket.Shutdown(SocketShutdown.Both);
                        clientSocket.Close();
                        Log.Information("Client connection closed.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Server error: " + ex.Message);
                Log.Fatal("Server crashed: {Error}", ex.Message);
            }
        }
    }
}
